INFO     Running translator.
INFO     translator stdin: None
INFO     translator time limit: None
INFO     translator memory limit: None
INFO     translator command line string: /usr/bin/python3 /home/bo198214/workspace/planner/downward/builds/release/bin/translate/translate.py /home/bo198214/workspace/slide_puzzle_gen/sokoban-domain.pddl /home/bo198214/workspace/slide_puzzle_gen/sokoban/sokoban38-problem.pddl --sas-file /home/bo198214/workspace/slide_puzzle_gen/solve-downward/sokoban/sokoban38.sas
Parsing...
Parsing: [0.000s CPU, 0.003s wall-clock]
Normalizing task... [0.000s CPU, 0.000s wall-clock]
Instantiating...
Generating Datalog program... [0.000s CPU, 0.000s wall-clock]
Normalizing Datalog program...
Normalizing Datalog program: [0.000s CPU, 0.003s wall-clock]
Preparing model... [0.000s CPU, 0.001s wall-clock]
Generated 57 rules.
Computing model... [0.030s CPU, 0.026s wall-clock]
1191 relevant atoms
2048 auxiliary atoms
3239 final queue length
4238 total queue pushes
Completing instantiation... [0.010s CPU, 0.019s wall-clock]
Instantiating: [0.040s CPU, 0.051s wall-clock]
Computing fact groups...
Finding invariants...
6 initial candidates
Finding invariants: [0.000s CPU, 0.003s wall-clock]
Checking invariant weight... [0.000s CPU, 0.000s wall-clock]
Instantiating groups... [0.000s CPU, 0.000s wall-clock]
Collecting mutex groups... [0.000s CPU, 0.000s wall-clock]
Choosing groups...
242 uncovered facts
Choosing groups: [0.000s CPU, 0.000s wall-clock]
Building translation key... [0.020s CPU, 0.001s wall-clock]
Computing fact groups: [0.020s CPU, 0.005s wall-clock]
Building STRIPS to SAS dictionary... [0.000s CPU, 0.000s wall-clock]
Building dictionary for full mutex groups... [0.000s CPU, 0.000s wall-clock]
Building mutex information...
Building mutex information: [0.000s CPU, 0.000s wall-clock]
Translating task...
Processing axioms...
Simplifying axioms... [0.000s CPU, 0.000s wall-clock]
Translator axioms removed by simplifying: 0
Computing negative axioms... [0.000s CPU, 0.000s wall-clock]
Processing axioms: [0.000s CPU, 0.001s wall-clock]
Translating task: [0.020s CPU, 0.022s wall-clock]
768 effect conditions simplified
0 implied preconditions added
Detecting unreachable propositions...
100 operators removed
0 axioms removed
112 propositions removed
Detecting unreachable propositions: [0.010s CPU, 0.010s wall-clock]
Reordering and filtering variables...
186 of 186 variables necessary.
0 of 0 mutex groups necessary.
416 of 416 operators necessary.
0 of 0 axiom rules necessary.
Reordering and filtering variables: [0.000s CPU, 0.006s wall-clock]
Translator variables: 186
Translator derived variables: 0
Translator facts: 372
Translator goal facts: 8
Translator mutex groups: 0
Translator total mutex groups size: 0
Translator operators: 416
Translator axioms: 0
Translator task size: 3126
Translator peak memory: 0 KB
Writing output... [0.000s CPU, 0.007s wall-clock]
Done! [0.090s CPU, 0.105s wall-clock]
translate exit code: 0

INFO     Running search (release).
INFO     search stdin: /home/bo198214/workspace/slide_puzzle_gen/solve-downward/sokoban/sokoban38.sas
INFO     search time limit: None
INFO     search memory limit: None
INFO     search command line string: /home/bo198214/workspace/planner/downward/builds/release/bin/downward --if-unit-cost --evaluator 'hlm=lmcount(lm_reasonable_orders_hps(lm_rhw()),pref=true)' --evaluator 'hff=ff()' --search 'iterated([lazy_greedy([hff,hlm],preferred=[hff,hlm]),lazy_wastar([hff,hlm],preferred=[hff,hlm],w=5),lazy_wastar([hff,hlm],preferred=[hff,hlm],w=3),lazy_wastar([hff,hlm],preferred=[hff,hlm],w=2),lazy_wastar([hff,hlm],preferred=[hff,hlm],w=1)],repeat_last=true,continue_on_fail=true)' --if-non-unit-cost --evaluator 'hlm1=lmcount(lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(one),pref=true)' --evaluator 'hff1=ff(transform=adapt_costs(one))' --evaluator 'hlm2=lmcount(lm_reasonable_orders_hps(lm_rhw()),transform=adapt_costs(plusone),pref=true)' --evaluator 'hff2=ff(transform=adapt_costs(plusone))' --search 'iterated([lazy_greedy([hff1,hlm1],preferred=[hff1,hlm1],cost_type=one,reopen_closed=false),lazy_greedy([hff2,hlm2],preferred=[hff2,hlm2],reopen_closed=false),lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=5),lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=3),lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=2),lazy_wastar([hff2,hlm2],preferred=[hff2,hlm2],w=1)],repeat_last=true,continue_on_fail=true)' --always --internal-plan-file /home/bo198214/workspace/slide_puzzle_gen/solve-downward/sokoban/sokoban38.txt < /home/bo198214/workspace/slide_puzzle_gen/solve-downward/sokoban/sokoban38.sas
[t=0s, 0 KB] reading input...
[t=0s, 0 KB] done reading input!
[t=0s, 0 KB] Initializing landmark count heuristic...
[t=0s, 0 KB] Generating landmark graph...
[t=0s, 0 KB] Building a landmark graph with reasonable orders.
[t=0s, 0 KB] Initializing Exploration...
[t=0s, 0 KB] Generating landmarks using the RPG/SAS+ approach
Removed 0 reasonable or obedient reasonable orders
[t=0.015625s, 0 KB] Landmarks generation time: 0.015625s
[t=0.015625s, 0 KB] Discovered 25 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.015625s, 0 KB] 37 edges
[t=0.015625s, 0 KB] approx. reasonable orders
[t=0.015625s, 0 KB] approx. obedient reasonable orders
[t=0.015625s, 0 KB] Removed 0 reasonable or obedient reasonable orders
[t=0.015625s, 0 KB] Landmarks generation time: 0.015625s
[t=0.015625s, 0 KB] Discovered 25 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.015625s, 0 KB] 37 edges
[t=0.015625s, 0 KB] Landmark graph generation time: 0.015625s
[t=0.015625s, 0 KB] Landmark graph contains 25 landmarks, of which 4 are disjunctive and 0 are conjunctive.
[t=0.015625s, 0 KB] Landmark graph contains 37 orderings.
[t=0.015625s, 0 KB] Simplifying 1152 unary operators... done! [1152 unary operators]
[t=0.015625s, 0 KB] time to simplify: 0s
[t=0.015625s, 0 KB] Initializing additive heuristic...
[t=0.015625s, 0 KB] Initializing FF heuristic...
[t=0.015625s, 0 KB] Building successor generator...done!
[t=0.015625s, 0 KB] peak memory difference for successor generator creation: 0 KB
[t=0.015625s, 0 KB] time for successor generation creation: 0s
[t=0.015625s, 0 KB] Variables: 186
[t=0.015625s, 0 KB] FactPairs: 372
[t=0.015625s, 0 KB] Bytes per state: 24
[t=0.015625s, 0 KB] Building successor generator...done!
[t=0.015625s, 0 KB] peak memory difference for successor generator creation: 0 KB
[t=0.015625s, 0 KB] time for successor generation creation: 0s
[t=0.015625s, 0 KB] Variables: 186
[t=0.015625s, 0 KB] FactPairs: 372
[t=0.015625s, 0 KB] Bytes per state: 24
[t=0.015625s, 0 KB] Starting search: lazy_greedy(list(hff, hlm), preferred = list(hff, hlm))
[t=0.015625s, 0 KB] Conducting lazy best first search, (real) bound = 2147483647
[t=0.015625s, 0 KB] 11 initial landmarks, 8 goal landmarks
[t=0.015625s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 14
[t=0.015625s, 0 KB] New best heuristic value for ff: 30
[t=0.015625s, 0 KB] g=0, 1 evaluated, 0 expanded
[t=0.015625s, 0 KB] Initial heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 14
[t=0.015625s, 0 KB] Initial heuristic value for ff: 30
[t=0.015625s, 0 KB] New best heuristic value for ff: 28
[t=0.015625s, 0 KB] g=1, 3 evaluated, 2 expanded
[t=0.015625s, 0 KB] New best heuristic value for ff: 25
[t=0.015625s, 0 KB] g=2, 4 evaluated, 3 expanded
[t=0.015625s, 0 KB] New best heuristic value for ff: 17
[t=0.015625s, 0 KB] g=3, 10 evaluated, 9 expanded
[t=0.015625s, 0 KB] New best heuristic value for ff: 16
[t=0.015625s, 0 KB] g=4, 11 evaluated, 10 expanded
[t=0.015625s, 0 KB] New best heuristic value for ff: 15
[t=0.015625s, 0 KB] g=5, 12 evaluated, 11 expanded
[t=0.015625s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 12
[t=0.015625s, 0 KB] New best heuristic value for ff: 13
[t=0.015625s, 0 KB] g=6, 14 evaluated, 13 expanded
[t=0.015625s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 11
[t=0.015625s, 0 KB] New best heuristic value for ff: 12
[t=0.015625s, 0 KB] g=7, 15 evaluated, 14 expanded
[t=0.015625s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 10
[t=0.015625s, 0 KB] g=16, 111 evaluated, 108 expanded
[t=0.015625s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 9
[t=0.015625s, 0 KB] g=18, 121 evaluated, 118 expanded
[t=0.015625s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 8
[t=0.015625s, 0 KB] g=22, 128 evaluated, 125 expanded
[t=0.015625s, 0 KB] New best heuristic value for ff: 11
[t=0.015625s, 0 KB] g=21, 129 evaluated, 126 expanded
[t=0.078125s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 7
[t=0.078125s, 0 KB] g=58, 2242 evaluated, 2201 expanded
[t=0.171875s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 6
[t=0.171875s, 0 KB] g=78, 5918 evaluated, 5816 expanded
[t=0.453125s, 0 KB] New best heuristic value for ff: 10
[t=0.453125s, 0 KB] g=104, 17047 evaluated, 16832 expanded
[t=0.453125s, 0 KB] New best heuristic value for ff: 9
[t=0.453125s, 0 KB] g=105, 17048 evaluated, 16833 expanded
[t=0.453125s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 5
[t=0.453125s, 0 KB] g=108, 17056 evaluated, 16841 expanded
[t=0.484375s, 0 KB] New best heuristic value for ff: 8
[t=0.484375s, 0 KB] g=113, 18295 evaluated, 18065 expanded
[t=0.765625s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 4
[t=0.765625s, 0 KB] New best heuristic value for ff: 7
[t=0.765625s, 0 KB] g=128, 29949 evaluated, 29615 expanded
                                                                                                                                                                                       [t=3756.62s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 2
[t=3756.62s, 0 KB] g=498, 129675329 evaluated, 128693220 expanded
[t=3756.64s, 0 KB] New best heuristic value for ff: 2
[t=3756.64s, 0 KB] g=526, 129676214 evaluated, 128694089 expanded
[t=7909.2s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 1
[t=7909.2s, 0 KB] g=520, 252383433 evaluated, 250564348 expanded
[t=7909.31s, 0 KB] New best heuristic value for ff: 1
[t=7909.31s, 0 KB] g=583, 252387250 evaluated, 250568129 expanded
[t=7909.31s, 0 KB] Solution found!
[t=7909.33s, 0 KB] Actual search time: 7909.33s
move-w h9 h8 v11 (1)
move-s h8 v11 v10 (1)
push-w h8 h7 h6 v10 (1)
push-w h7 h6 h5 v10 (1)
push-w h6 h5 h4 v10 (1)
push-s h5 v10 v9 v8 (1)
push-s h5 v9 v8 v7 (1)
move-n h5 v8 v9 (1)
move-w h5 h4 v9 (1)
move-w h4 h3 v9 (1)
move-n h3 v9 v10 (1)
push-e h3 h4 h5 v10 (1)
push-e h4 h5 h6 v10 (1)
move-s h5 v10 v9 (1)
move-s h5 v9 v8 (1)
move-e h5 h6 v8 (1)
move-s h6 v8 v7 (1)
move-s h6 v7 v6 (1)
move-w h6 h5 v6 (1)
push-n h5 v6 v7 v8 (1)
move-s h5 v7 v6 (1)
move-s h5 v6 v5 (1)
move-w h5 h4 v5 (1)
move-w h4 h3 v5 (1)
move-n h3 v5 v6 (1)
move-n h3 v6 v7 (1)
push-e h3 h4 h5 v7 (1)
push-e h4 h5 h6 v7 (1)
move-s h5 v7 v6 (1)
move-e h5 h6 v6 (1)
push-n h6 v6 v7 v8 (1)
move-w h6 h5 v7 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
push-n h3 v7 v8 v9 (1)
push-n h3 v8 v9 v10 (1)
move-w h3 h2 v9 (1)
move-n h2 v9 v10 (1)
push-e h2 h3 h4 v10 (1)
move-s h3 v10 v9 (1)
move-e h3 h4 v9 (1)
move-e h4 h5 v9 (1)
push-s h5 v9 v8 v7 (1)
move-n h5 v8 v9 (1)
move-w h5 h4 v9 (1)
move-w h4 h3 v9 (1)
move-s h3 v9 v8 (1)
move-s h3 v8 v7 (1)
move-e h3 h4 v7 (1)
push-e h4 h5 h6 v7 (1)
move-s h5 v7 v6 (1)
move-e h5 h6 v6 (1)
move-e h6 h7 v6 (1)
move-n h7 v6 v7 (1)
move-n h7 v7 v8 (1)
push-w h7 h6 h5 v8 (1)
push-s h6 v8 v7 v6 (1)
move-w h6 h5 v7 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
move-n h3 v7 v8 (1)
move-n h3 v8 v9 (1)
move-e h3 h4 v9 (1)
move-e h4 h5 v9 (1)
push-s h5 v9 v8 v7 (1)
move-e h5 h6 v8 (1)
move-s h6 v8 v7 (1)
move-e h6 h7 v7 (1)
move-s h7 v7 v6 (1)
move-s h7 v6 v5 (1)
move-s h7 v5 v4 (1)
push-w h7 h6 h5 v4 (1)
move-e h6 h7 v4 (1)
move-n h7 v4 v5 (1)
move-n h7 v5 v6 (1)
move-n h7 v6 v7 (1)
move-w h7 h6 v7 (1)
move-n h6 v7 v8 (1)
move-w h6 h5 v8 (1)
move-n h5 v8 v9 (1)
move-w h5 h4 v9 (1)
move-w h4 h3 v9 (1)
move-s h3 v9 v8 (1)
move-s h3 v8 v7 (1)
move-e h3 h4 v7 (1)
push-e h4 h5 h6 v7 (1)
move-n h5 v7 v8 (1)
move-e h5 h6 v8 (1)
move-e h6 h7 v8 (1)
move-s h7 v8 v7 (1)
move-s h7 v7 v6 (1)
push-w h7 h6 h5 v6 (1)
push-n h6 v6 v7 v8 (1)
move-w h6 h5 v7 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
move-s h3 v7 v6 (1)
move-s h3 v6 v5 (1)
move-e h3 h4 v5 (1)
move-e h4 h5 v5 (1)
push-n h5 v5 v6 v7 (1)
move-s h5 v6 v5 (1)
move-w h5 h4 v5 (1)
move-s h4 v5 v4 (1)
move-s h4 v4 v3 (1)
move-w h4 h3 v3 (1)
push-n h3 v3 v4 v5 (1)
push-n h3 v4 v5 v6 (1)
move-e h3 h4 v5 (1)
move-s h4 v5 v4 (1)
push-e h4 h5 h6 v4 (1)
move-n h5 v4 v5 (1)
move-n h5 v5 v6 (1)
push-n h5 v6 v7 v8 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
move-n h3 v7 v8 (1)
move-n h3 v8 v9 (1)
move-e h3 h4 v9 (1)
move-e h4 h5 v9 (1)
move-n h5 v9 v10 (1)
push-w h5 h4 h3 v10 (1)
move-e h4 h5 v10 (1)
move-s h5 v10 v9 (1)
push-s h5 v9 v8 v7 (1)
move-n h5 v8 v9 (1)
move-w h5 h4 v9 (1)
move-w h4 h3 v9 (1)
move-s h3 v9 v8 (1)
move-s h3 v8 v7 (1)
move-e h3 h4 v7 (1)
push-e h4 h5 h6 v7 (1)
move-s h5 v7 v6 (1)
move-e h5 h6 v6 (1)
move-e h6 h7 v6 (1)
move-n h7 v6 v7 (1)
move-n h7 v7 v8 (1)
push-w h7 h6 h5 v8 (1)
push-s h6 v8 v7 v6 (1)
move-w h6 h5 v7 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
move-n h3 v7 v8 (1)
move-n h3 v8 v9 (1)
move-e h3 h4 v9 (1)
move-e h4 h5 v9 (1)
push-s h5 v9 v8 v7 (1)
move-e h5 h6 v8 (1)
move-s h6 v8 v7 (1)
move-e h6 h7 v7 (1)
move-s h7 v7 v6 (1)
move-s h7 v6 v5 (1)
move-s h7 v5 v4 (1)
push-w h7 h6 h5 v4 (1)
move-e h6 h7 v4 (1)
move-n h7 v4 v5 (1)
move-n h7 v5 v6 (1)
move-n h7 v6 v7 (1)
move-w h7 h6 v7 (1)
move-n h6 v7 v8 (1)
move-w h6 h5 v8 (1)
move-n h5 v8 v9 (1)
move-w h5 h4 v9 (1)
move-w h4 h3 v9 (1)
move-s h3 v9 v8 (1)
move-s h3 v8 v7 (1)
move-e h3 h4 v7 (1)
push-e h4 h5 h6 v7 (1)
move-s h5 v7 v6 (1)
move-s h5 v6 v5 (1)
move-w h5 h4 v5 (1)
move-w h4 h3 v5 (1)
push-n h3 v5 v6 v7 (1)
move-s h3 v6 v5 (1)
move-e h3 h4 v5 (1)
move-e h4 h5 v5 (1)
move-n h5 v5 v6 (1)
move-n h5 v6 v7 (1)
move-n h5 v7 v8 (1)
move-e h5 h6 v8 (1)
move-e h6 h7 v8 (1)
move-s h7 v8 v7 (1)
move-s h7 v7 v6 (1)
move-s h7 v6 v5 (1)
move-s h7 v5 v4 (1)
move-w h7 h6 v4 (1)
push-w h6 h5 h4 v4 (1)
move-n h5 v4 v5 (1)
move-n h5 v5 v6 (1)
move-n h5 v6 v7 (1)
push-e h5 h6 h7 v7 (1)
move-w h6 h5 v7 (1)
move-s h5 v7 v6 (1)
move-s h5 v6 v5 (1)
move-s h5 v5 v4 (1)
move-e h5 h6 v4 (1)
move-e h6 h7 v4 (1)
move-n h7 v4 v5 (1)
move-n h7 v5 v6 (1)
push-n h7 v6 v7 v8 (1)
move-w h7 h6 v7 (1)
move-w h6 h5 v7 (1)
move-s h5 v7 v6 (1)
push-e h5 h6 h7 v6 (1)
move-w h6 h5 v6 (1)
move-s h5 v6 v5 (1)
move-w h5 h4 v5 (1)
move-w h4 h3 v5 (1)
move-s h3 v5 v4 (1)
move-s h3 v4 v3 (1)
move-e h3 h4 v3 (1)
push-n h4 v3 v4 v5 (1)
move-w h4 h3 v4 (1)
move-n h3 v4 v5 (1)
push-e h3 h4 h5 v5 (1)
move-s h4 v5 v4 (1)
move-e h4 h5 v4 (1)
push-n h5 v4 v5 v6 (1)
push-n h5 v5 v6 v7 (1)
move-e h5 h6 v6 (1)
move-n h6 v6 v7 (1)
move-n h6 v7 v8 (1)
move-w h6 h5 v8 (1)
push-s h5 v8 v7 v6 (1)
move-e h5 h6 v7 (1)
move-e h6 h7 v7 (1)
move-e h7 h8 v7 (1)
move-e h8 h9 v7 (1)
move-s h9 v7 v6 (1)
push-s h9 v6 v5 v4 (1)
move-e h9 h10 v5 (1)
move-s h10 v5 v4 (1)
push-w h10 h9 h8 v4 (1)
push-w h9 h8 h7 v4 (1)
push-w h8 h7 h6 v4 (1)
push-w h7 h6 h5 v4 (1)
push-w h6 h5 h4 v4 (1)
move-n h5 v4 v5 (1)
push-n h5 v5 v6 v7 (1)
move-s h5 v6 v5 (1)
move-s h5 v5 v4 (1)
move-e h5 h6 v4 (1)
move-e h6 h7 v4 (1)
move-n h7 v4 v5 (1)
push-n h7 v5 v6 v7 (1)
move-w h7 h6 v6 (1)
move-n h6 v6 v7 (1)
move-n h6 v7 v8 (1)
move-w h6 h5 v8 (1)
move-n h5 v8 v9 (1)
move-w h5 h4 v9 (1)
move-w h4 h3 v9 (1)
move-s h3 v9 v8 (1)
push-s h3 v8 v7 v6 (1)
move-e h3 h4 v7 (1)
push-e h4 h5 h6 v7 (1)
move-s h5 v7 v6 (1)
move-s h5 v6 v5 (1)
move-w h5 h4 v5 (1)
move-w h4 h3 v5 (1)
move-s h3 v5 v4 (1)
move-s h3 v4 v3 (1)
move-e h3 h4 v3 (1)
push-n h4 v3 v4 v5 (1)
move-w h4 h3 v4 (1)
move-n h3 v4 v5 (1)
push-e h3 h4 h5 v5 (1)
move-s h4 v5 v4 (1)
move-e h4 h5 v4 (1)
push-n h5 v4 v5 v6 (1)
move-s h5 v5 v4 (1)
move-e h5 h6 v4 (1)
move-e h6 h7 v4 (1)
move-e h7 h8 v4 (1)
move-e h8 h9 v4 (1)
move-n h9 v4 v5 (1)
move-n h9 v5 v6 (1)
move-n h9 v6 v7 (1)
move-n h9 v7 v8 (1)
push-n h9 v8 v9 v10 (1)
move-w h9 h8 v9 (1)
move-n h8 v9 v10 (1)
move-n h8 v10 v11 (1)
move-e h8 h9 v11 (1)
push-s h9 v11 v10 v9 (1)
push-s h9 v10 v9 v8 (1)
push-s h9 v9 v8 v7 (1)
push-s h9 v8 v7 v6 (1)
push-s h9 v7 v6 v5 (1)
push-s h9 v6 v5 v4 (1)
move-e h9 h10 v5 (1)
move-s h10 v5 v4 (1)
push-w h10 h9 h8 v4 (1)
push-w h9 h8 h7 v4 (1)
push-w h8 h7 h6 v4 (1)
push-w h7 h6 h5 v4 (1)
push-w h6 h5 h4 v4 (1)
move-n h5 v4 v5 (1)
move-w h5 h4 v5 (1)
move-w h4 h3 v5 (1)
move-s h3 v5 v4 (1)
move-s h3 v4 v3 (1)
move-e h3 h4 v3 (1)
push-n h4 v3 v4 v5 (1)
move-e h4 h5 v4 (1)
move-n h5 v4 v5 (1)
push-n h5 v5 v6 v7 (1)
push-n h5 v6 v7 v8 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
push-s h3 v7 v6 v5 (1)
push-s h3 v6 v5 v4 (1)
push-e h3 h4 h5 v5 (1)
move-s h4 v5 v4 (1)
move-e h4 h5 v4 (1)
push-n h5 v4 v5 v6 (1)
move-w h5 h4 v5 (1)
move-w h4 h3 v5 (1)
move-n h3 v5 v6 (1)
move-n h3 v6 v7 (1)
move-n h3 v7 v8 (1)
move-n h3 v8 v9 (1)
move-e h3 h4 v9 (1)
move-e h4 h5 v9 (1)
move-n h5 v9 v10 (1)
push-e h5 h6 h7 v10 (1)
move-w h6 h5 v10 (1)
move-s h5 v10 v9 (1)
push-s h5 v9 v8 v7 (1)
move-e h5 h6 v8 (1)
push-s h6 v8 v7 v6 (1)
move-n h6 v7 v8 (1)
move-w h6 h5 v8 (1)
move-n h5 v8 v9 (1)
move-w h5 h4 v9 (1)
move-w h4 h3 v9 (1)
move-s h3 v9 v8 (1)
move-s h3 v8 v7 (1)
move-e h3 h4 v7 (1)
push-e h4 h5 h6 v7 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
move-s h3 v7 v6 (1)
move-s h3 v6 v5 (1)
move-e h3 h4 v5 (1)
move-e h4 h5 v5 (1)
push-n h5 v5 v6 v7 (1)
push-e h5 h6 h7 v6 (1)
push-n h6 v6 v7 v8 (1)
move-s h6 v7 v6 (1)
move-w h6 h5 v6 (1)
move-s h5 v6 v5 (1)
move-s h5 v5 v4 (1)
move-e h5 h6 v4 (1)
move-e h6 h7 v4 (1)
move-e h7 h8 v4 (1)
move-e h8 h9 v4 (1)
move-n h9 v4 v5 (1)
move-n h9 v5 v6 (1)
move-n h9 v6 v7 (1)
move-w h9 h8 v7 (1)
push-w h8 h7 h6 v7 (1)
push-s h7 v7 v6 v5 (1)
move-w h7 h6 v6 (1)
move-w h6 h5 v6 (1)
move-s h5 v6 v5 (1)
move-s h5 v5 v4 (1)
move-e h5 h6 v4 (1)
move-e h6 h7 v4 (1)
push-n h7 v4 v5 v6 (1)
move-s h7 v5 v4 (1)
move-w h7 h6 v4 (1)
move-w h6 h5 v4 (1)
move-n h5 v4 v5 (1)
move-n h5 v5 v6 (1)
push-n h5 v6 v7 v8 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
move-n h3 v7 v8 (1)
move-n h3 v8 v9 (1)
move-e h3 h4 v9 (1)
move-e h4 h5 v9 (1)
move-n h5 v9 v10 (1)
move-e h5 h6 v10 (1)
push-e h6 h7 h8 v10 (1)
push-e h7 h8 h9 v10 (1)
move-w h8 h7 v10 (1)
move-w h7 h6 v10 (1)
move-w h6 h5 v10 (1)
move-s h5 v10 v9 (1)
push-s h5 v9 v8 v7 (1)
push-s h5 v8 v7 v6 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
move-s h3 v7 v6 (1)
move-s h3 v6 v5 (1)
move-e h3 h4 v5 (1)
move-s h4 v5 v4 (1)
move-s h4 v4 v3 (1)
move-w h4 h3 v3 (1)
push-n h3 v3 v4 v5 (1)
push-n h3 v4 v5 v6 (1)
push-n h3 v5 v6 v7 (1)
push-n h3 v6 v7 v8 (1)
move-e h3 h4 v7 (1)
move-e h4 h5 v7 (1)
move-n h5 v7 v8 (1)
move-n h5 v8 v9 (1)
move-w h5 h4 v9 (1)
move-w h4 h3 v9 (1)
move-w h3 h2 v9 (1)
move-n h2 v9 v10 (1)
push-e h2 h3 h4 v10 (1)
push-e h3 h4 h5 v10 (1)
move-s h4 v10 v9 (1)
move-e h4 h5 v9 (1)
move-s h5 v9 v8 (1)
move-s h5 v8 v7 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
push-n h3 v7 v8 v9 (1)
move-s h3 v8 v7 (1)
move-e h3 h4 v7 (1)
move-e h4 h5 v7 (1)
move-n h5 v7 v8 (1)
move-n h5 v8 v9 (1)
move-w h5 h4 v9 (1)
move-n h4 v9 v10 (1)
push-e h4 h5 h6 v10 (1)
move-w h5 h4 v10 (1)
move-w h4 h3 v10 (1)
move-w h3 h2 v10 (1)
move-s h2 v10 v9 (1)
push-e h2 h3 h4 v9 (1)
push-e h3 h4 h5 v9 (1)
move-n h4 v9 v10 (1)
move-e h4 h5 v10 (1)
push-s h5 v10 v9 v8 (1)
move-n h5 v9 v10 (1)
push-e h5 h6 h7 v10 (1)
move-w h6 h5 v10 (1)
move-s h5 v10 v9 (1)
move-w h5 h4 v9 (1)
move-w h4 h3 v9 (1)
move-s h3 v9 v8 (1)
move-s h3 v8 v7 (1)
move-e h3 h4 v7 (1)
move-e h4 h5 v7 (1)
push-e h5 h6 h7 v7 (1)
move-w h6 h5 v7 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
move-s h3 v7 v6 (1)
move-s h3 v6 v5 (1)
move-e h3 h4 v5 (1)
move-e h4 h5 v5 (1)
move-s h5 v5 v4 (1)
move-e h5 h6 v4 (1)
move-e h6 h7 v4 (1)
move-e h7 h8 v4 (1)
move-e h8 h9 v4 (1)
move-n h9 v4 v5 (1)
move-n h9 v5 v6 (1)
move-n h9 v6 v7 (1)
move-n h9 v7 v8 (1)
move-n h9 v8 v9 (1)
move-w h9 h8 v9 (1)
move-n h8 v9 v10 (1)
move-n h8 v10 v11 (1)
move-e h8 h9 v11 (1)
push-s h9 v11 v10 v9 (1)
push-s h9 v10 v9 v8 (1)
push-s h9 v9 v8 v7 (1)
push-s h9 v8 v7 v6 (1)
push-s h9 v7 v6 v5 (1)
push-s h9 v6 v5 v4 (1)
move-e h9 h10 v5 (1)
move-s h10 v5 v4 (1)
push-w h10 h9 h8 v4 (1)
push-w h9 h8 h7 v4 (1)
push-w h8 h7 h6 v4 (1)
push-w h7 h6 h5 v4 (1)
push-w h6 h5 h4 v4 (1)
move-n h5 v4 v5 (1)
move-w h5 h4 v5 (1)
move-w h4 h3 v5 (1)
move-n h3 v5 v6 (1)
move-n h3 v6 v7 (1)
move-n h3 v7 v8 (1)
move-n h3 v8 v9 (1)
move-e h3 h4 v9 (1)
move-e h4 h5 v9 (1)
push-s h5 v9 v8 v7 (1)
move-n h5 v8 v9 (1)
move-w h5 h4 v9 (1)
move-w h4 h3 v9 (1)
move-s h3 v9 v8 (1)
move-s h3 v8 v7 (1)
move-e h3 h4 v7 (1)
push-e h4 h5 h6 v7 (1)
move-w h5 h4 v7 (1)
move-w h4 h3 v7 (1)
move-s h3 v7 v6 (1)
move-s h3 v6 v5 (1)
move-s h3 v5 v4 (1)
move-s h3 v4 v3 (1)
move-e h3 h4 v3 (1)
push-n h4 v3 v4 v5 (1)
move-e h4 h5 v4 (1)
move-n h5 v4 v5 (1)
push-n h5 v5 v6 v7 (1)
move-s h5 v6 v5 (1)
move-s h5 v5 v4 (1)
move-w h5 h4 v4 (1)
move-w h4 h3 v4 (1)
move-n h3 v4 v5 (1)
push-e h3 h4 h5 v5 (1)
move-s h4 v5 v4 (1)
move-e h4 h5 v4 (1)
push-n h5 v4 v5 v6 (1)
move-w h5 h4 v5 (1)
move-w h4 h3 v5 (1)
move-n h3 v5 v6 (1)
move-n h3 v6 v7 (1)
move-n h3 v7 v8 (1)
move-n h3 v8 v9 (1)
move-e h3 h4 v9 (1)
move-n h4 v9 v10 (1)
move-e h4 h5 v10 (1)
move-e h5 h6 v10 (1)
push-e h6 h7 h8 v10 (1)
push-e h7 h8 h9 v10 (1)
move-n h8 v10 v11 (1)
move-e h8 h9 v11 (1)
push-s h9 v11 v10 v9 (1)
push-s h9 v10 v9 v8 (1)
push-s h9 v9 v8 v7 (1)
push-s h9 v8 v7 v6 (1)
push-s h9 v7 v6 v5 (1)
push-s h9 v6 v5 v4 (1)
move-e h9 h10 v5 (1)
move-s h10 v5 v4 (1)
push-w h10 h9 h8 v4 (1)
push-w h9 h8 h7 v4 (1)
push-w h8 h7 h6 v4 (1)
push-w h7 h6 h5 v4 (1)
push-w h6 h5 h4 v4 (1)
push-w h5 h4 h3 v4 (1)
move-s h4 v4 v3 (1)
move-w h4 h3 v3 (1)
push-n h3 v3 v4 v5 (1)
push-n h3 v4 v5 v6 (1)
push-n h3 v5 v6 v7 (1)
push-n h3 v6 v7 v8 (1)
push-n h3 v7 v8 v9 (1)
move-s h3 v8 v7 (1)
move-s h3 v7 v6 (1)
move-s h3 v6 v5 (1)
move-s h3 v5 v4 (1)
move-e h3 h4 v4 (1)
move-e h4 h5 v4 (1)
move-e h5 h6 v4 (1)
move-e h6 h7 v4 (1)
move-e h7 h8 v4 (1)
move-e h8 h9 v4 (1)
move-n h9 v4 v5 (1)
move-n h9 v5 v6 (1)
move-n h9 v6 v7 (1)
move-n h9 v7 v8 (1)
move-n h9 v8 v9 (1)
move-n h9 v9 v10 (1)
move-w h9 h8 v10 (1)
move-w h8 h7 v10 (1)
move-w h7 h6 v10 (1)
move-w h6 h5 v10 (1)
move-w h5 h4 v10 (1)
move-w h4 h3 v10 (1)
move-w h3 h2 v10 (1)
move-s h2 v10 v9 (1)
push-e h2 h3 h4 v9 (1)
push-e h3 h4 h5 v9 (1)
move-n h4 v9 v10 (1)
move-e h4 h5 v10 (1)
push-s h5 v10 v9 v8 (1)
[t=7909.33s, 0 KB] Plan length: 584 step(s).
[t=7909.33s, 0 KB] Plan cost: 584
[t=7909.33s, 0 KB] Expanded 250568130 state(s).
[t=7909.33s, 0 KB] Reopened 0 state(s).
[t=7909.33s, 0 KB] Evaluated 252387251 state(s).
[t=7909.33s, 0 KB] Evaluations: 502955382
[t=7909.33s, 0 KB] Generated 672145769 state(s).
[t=7909.33s, 0 KB] Dead ends: 1819120 state(s).
[t=7909.33s, 0 KB] Number of registered states: 252387251
[t=7909.33s, 0 KB] Int hash set load factor: 252387251/536870912 = 0.470108
[t=7909.33s, 0 KB] Int hash set resizes: 29
[t=7909.33s, 0 KB] Best solution cost so far: 584
[t=7909.33s, 0 KB] Solution found - keep searching
[t=8142.94s, 0 KB] Building successor generator...done!
[t=8142.94s, 0 KB] peak memory difference for successor generator creation: 0 KB
[t=8142.94s, 0 KB] time for successor generation creation: 0s
[t=8142.94s, 0 KB] Variables: 186
[t=8142.94s, 0 KB] FactPairs: 372
[t=8142.94s, 0 KB] Bytes per state: 24
[t=8142.94s, 0 KB] Starting search: lazy_wastar(list(hff, hlm), preferred = list(hff, hlm), w = 5)
[t=8142.94s, 0 KB] Conducting lazy best first search, (real) bound = 584
[t=8142.94s, 0 KB] 11 initial landmarks, 8 goal landmarks
[t=8142.94s, 0 KB] New best heuristic value for ff: 29
[t=8142.94s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 14
[t=8142.94s, 0 KB] g=0, 1 evaluated, 0 expanded
[t=8142.94s, 0 KB] Initial heuristic value for ff: 29
[t=8142.94s, 0 KB] Initial heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 14
[t=8142.94s, 0 KB] New best heuristic value for ff: 27
[t=8142.94s, 0 KB] g=1, 2 evaluated, 1 expanded
[t=8142.94s, 0 KB] New best heuristic value for ff: 25
[t=8142.94s, 0 KB] g=2, 3 evaluated, 2 expanded
[t=8142.94s, 0 KB] New best heuristic value for ff: 17
[t=8142.94s, 0 KB] g=3, 5 evaluated, 4 expanded
[t=8142.94s, 0 KB] New best heuristic value for ff: 16
[t=8142.94s, 0 KB] g=4, 7 evaluated, 6 expanded
[t=8142.94s, 0 KB] New best heuristic value for ff: 13
[t=8142.94s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 12
[t=8142.94s, 0 KB] g=6, 9 evaluated, 8 expanded
[t=8142.94s, 0 KB] New best heuristic value for ff: 12
[t=8142.94s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 11
[t=8142.94s, 0 KB] g=7, 10 evaluated, 9 expanded
[t=8142.95s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 10
[t=8142.95s, 0 KB] g=16, 340 evaluated, 333 expanded, 12 reopened
[t=8142.95s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 9
[t=8142.95s, 0 KB] g=18, 348 evaluated, 341 expanded, 12 reopened
[t=8142.95s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 8
[t=8142.95s, 0 KB] g=22, 356 evaluated, 349 expanded, 12 reopened
[t=8142.95s, 0 KB] New best heuristic value for ff: 11
[t=8142.95s, 0 KB] g=20, 386 evaluated, 379 expanded, 14 reopened
[t=8142.95s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 7
[t=8142.95s, 0 KB] g=32, 479 evaluated, 471 expanded, 14 reopened
[t=8143.22s, 0 KB] New best heuristic value for ff: 10
[t=8143.22s, 0 KB] g=16, 8739 evaluated, 8554 expanded, 370 reopened
[t=8143.22s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 6
[t=8143.22s, 0 KB] g=28, 8849 evaluated, 8663 expanded, 375 reopened
[t=8143.27s, 0 KB] New best heuristic value for ff: 9
[t=8143.27s, 0 KB] g=27, 10383 evaluated, 10191 expanded, 495 reopened
[t=8143.31s, 0 KB] New best heuristic value for ff: 8
[t=8143.31s, 0 KB] g=29, 11818 evaluated, 11619 expanded, 618 reopened
[t=8261.08s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 5
[t=8261.08s, 0 KB] g=56, 4160540 evaluated, 4143751 expanded, 682866 reopened
[t=8349.3s, 0 KB] New best heuristic value for ff: 7
[t=8349.3s, 0 KB] g=55, 7301910 evaluated, 7272393 expanded, 1232090 reopened
[t=8524.05s, 0 KB] New best heuristic value for ff: 6
[t=8524.05s, 0 KB] g=61, 13456145 evaluated, 13399644 expanded, 2345923 reopened
[t=13691.8s, 0 KB] New best heuristic value for lmcount(lm_reasonable_orders_hps(lm_rhw), pref = true): 4
[t=13691.8s, 0 KB] g=82, 194856352 evaluated, 194002382 expanded, 43048283 reopened
