(define (domain khunpan)
  (:requirements [:strips] [:equality] [:typing] [:adl])
  (:predicates (adjwe ?h1 ?h2) (adjns ?v1 ?v2) 
               (at ?t ?h ?v) (empty ?h ?v) (type_h2 ?t) (type_o ?t) (type_v2 ?t) (type_sq ?t))
  (:action move-sq-s
   :parameters (?t ?x1 ?y1 ?x2 ?y2 ?ys)
   :precondition (and (type_sq ?t)
        (at ?t ?x1 ?y1) (at ?t ?x2 ?y1) (at ?t ?x1 ?y2) (at ?t ?x2 ?y2)
        (adjns ?y1 ?y2) (adjwe ?x1 ?x2)
        (adjns ?y2 ?ys)
        (empty ?x1 ?ys) (empty ?x2 ?ys)
   )
   :effect (and 
        (not (at ?t ?x1 ?y1)) (empty ?x1 ?y1) (not (at ?t ?x2 ?y1)) (empty ?x2 ?y1)
        (at ?t ?x1 ?ys) (not (empty ?x1 ?ys)) (at ?t ?x2 ?ys) (not (empty ?x2 ?ys))
   )
  )
  (:action move-sq-n
   :parameters (?t ?x1 ?y1 ?x2 ?y2 ?yn)
   :precondition (and (type_sq ?t)
        (at ?t ?x1 ?y1) (at ?t ?x2 ?y1) (at ?t ?x1 ?y2) (at ?t ?x2 ?y2)
        (adjns ?y1 ?y2) (adjwe ?x1 ?x2)
        (adjns ?yn ?y1)
        (empty ?x1 ?yn) (empty ?x2 ?yn)
   )
   :effect (and 
        (not (at ?t ?x1 ?y2)) (empty ?x1 ?y2) (not (at ?t ?x2 ?y2)) (empty ?x2 ?y2)
        (at ?t ?x1 ?yn) (not (empty ?x1 ?yn)) (at ?t ?x2 ?yn) (not (empty ?x2 ?yn))
   )
  )
  (:action move-sq-e
   :parameters (?t ?x1 ?y1 ?x2 ?y2 ?xe)
   :precondition (and (type_sq ?t)
        (at ?t ?x1 ?y1) (at ?t ?x2 ?y1) (at ?t ?x1 ?y2) (at ?t ?x2 ?y2)
        (adjns ?y1 ?y2) (adjwe ?x1 ?x2)
        (adjwe ?x2 ?xe)
        (empty ?xe ?y1) (empty ?xe ?y2)
   )
   :effect (and
        (not (at ?t ?x1 ?y1)) (empty ?x1 ?y1) (not (at ?t ?x1 ?y2)) (empty ?x1 ?y2)
        (at ?t ?xe ?y1) (not (empty ?xe ?y1)) (at ?t ?xe ?y2) (not (empty ?xe ?y2))
   )
  )
  (:action move-sq-w
   :parameters (?t ?x1 ?y1 ?x2 ?y2 ?xw)
   :precondition (and (type_sq ?t)
        (at ?t ?x1 ?y1) (at ?t ?x2 ?y1) (at ?t ?x1 ?y2) (at ?t ?x2 ?y2)
        (adjns ?y1 ?y2) (adjwe ?x1 ?x2)
        (adjwe ?xw ?x1)
        (empty ?xw ?y1) (empty ?xw ?y2)
   )
   :effect (and
        (not (at ?t ?x2 ?y1)) (empty ?x2 ?y1) (not (at ?t ?x2 ?y2)) (empty ?x2 ?y2)
        (at ?t ?xw ?y1) (not (empty ?xw ?y1)) (at ?t ?xw ?y2) (not (empty ?xw ?y2))
   )
  )
  (:action move-v2-s
   :parameters (?t ?x ?y1 ?y2 ?ys)
   :precondition (and (type_v2 ?t)
        (at ?t ?x ?y1) (at ?t ?x ?y2)
        (adjns ?y1 ?y2) (adjns ?y2 ?ys)
        (empty ?x ?ys))

   :effect (and (not (at ?t ?x ?y1)) (empty ?x ?y1) (at ?t ?x ?ys) (not (empty ?x ?ys)))
   )
  (:action move-v2-n
   :parameters (?t ?x ?yn ?y1 ?y2)
   :precondition (and (type_v2 ?t)
        (at ?t ?x ?y1) (at ?t ?x ?y2)
        (adjns ?yn ?y1) (adjns ?y1 ?y2)
        (empty ?x ?yn))

   :effect (and (not (at ?t ?x ?y2)) (empty ?x ?y2) (at ?t ?x ?yn) (not (empty ?x ?yn)))
   )
  (:action move-v2-w
   :parameters (?t ?x ?xw ?y1 ?y2)
   :precondition (and (type_v2 ?t)
        (at ?t ?x ?y1) (at ?t ?x ?y2)
        (adjns ?y1 ?y2) (adjwe ?xw ?x)
        (empty ?xw ?y1) (empty ?xw ?y2))
   :effect (and (not (at ?t ?x ?y1)) (empty ?x ?y1)   (not (at ?t ?x ?y2)) (empty ?x ?y2)
                (at ?t ?xw ?y1) (not (empty ?xw ?y1)) (at ?t ?xw ?y2) (not (empty ?xw ?y2)))
   )
  (:action move-v2-e
   :parameters (?t ?x ?xe ?y1 ?y2)
   :precondition (and (type_v2 ?t)
        (at ?t ?x ?y1) (at ?t ?x ?y2)
        (adjns ?y1 ?y2) (adjwe ?x ?xe)
        (empty ?xe ?y1) (empty ?xe ?y2))
   :effect (and (not (at ?t ?x ?y1)) (empty ?x ?y1)   (not (at ?t ?x ?y2)) (empty ?x ?y2)
                (at ?t ?xe ?y1) (not (empty ?xe ?y1)) (at ?t ?xe ?y2) (not (empty ?xe ?y2)))
   )
  (:action move-h2-e
   :parameters (?t ?x1 ?x2 ?xe ?y)
   :precondition (and (type_h2 ?t)
        (at ?t ?x1 ?y) (at ?t ?x2 ?y)
        (adjwe ?x1 ?x2) (adjwe ?x2 ?xe)
        (empty ?xe ?y))

   :effect (and (not (at ?t ?x1 ?y)) (empty ?x1 ?y) (at ?t ?xe ?y) (not (empty ?xe ?y)))
   )
  (:action move-h2-w
   :parameters (?t ?xw ?x1 ?x2 ?y)
   :precondition (and (type_h2 ?t)
        (at ?t ?x1 ?y) (at ?t ?x2 ?y) 
        (adjwe ?xw ?x1) (adjwe ?x1 ?x2)
        (empty ?xw ?y))

   :effect (and (not (at ?t ?x2 ?y)) (empty ?x2 ?y) (at ?t ?xw ?y) (not (empty ?xw ?y)))
   )
  (:action move-h2-n
   :parameters (?t ?x1 ?x2 ?y ?yn)
   :precondition (and (type_h2 ?t)
        (at ?t ?x1 ?y) (at ?t ?x2 ?y)
        (adjwe ?x1 ?x2) (adjns ?yn ?y)
        (empty ?x1 ?yn) (empty ?x2 ?yn))
   :effect (and (not (at ?t ?x1 ?y)) (empty ?x1 ?y)   (not (at ?t ?x2 ?y)) (empty ?x2 ?y) 
                (at ?t ?x1 ?yn) (not (empty ?x1 ?yn)) (at ?t ?x2 ?yn) (not (empty ?x2 ?yn)))
   )
  (:action move-h2-s
   :parameters (?t ?x1 ?x2 ?y ?ys)
   :precondition (and (type_h2 ?t)
        (at ?t ?x1 ?y) (at ?t ?x2 ?y)
        (adjwe ?x1 ?x2) (adjns ?y ?ys)
        (empty ?x1 ?ys) (empty ?x2 ?ys))
   :effect (and (not (at ?t ?x1 ?y)) (empty ?x1 ?y)   (not (at ?t ?x2 ?y)) (empty ?x2 ?y) 
                (at ?t ?x1 ?ys) (not (empty ?x1 ?ys)) (at ?t ?x2 ?ys) (not (empty ?x2 ?ys)))
   )
  (:action move-o-e
   :parameters (?t ?x ?xe ?y)
   :precondition (and (type_o ?t) (at ?t ?x ?y) (adjwe ?x ?xe) (empty ?xe ?y))
   :effect (and (at ?t ?xe ?y) (not (empty ?xe ?y)) (empty ?x ?y) (not (at ?t ?x ?y)))
  )
  (:action move-o-w
   :parameters (?t ?x ?xw ?y)
   :precondition (and (type_o ?t) (at ?t ?x ?y) (adjwe ?xw ?x) (empty ?xw ?y))
   :effect (and (at ?t ?xw ?y) (not (empty ?xw ?y)) (empty ?x ?y) (not (at ?t ?x ?y)))
  )
  (:action move-o-n
   :parameters (?t ?x ?y ?yn)
   :precondition (and (type_o ?t) (at ?t ?x ?y) (adjns ?yn ?y) (empty ?x ?yn))
   :effect (and (at ?t ?x ?yn) (not (empty ?x ?yn)) (empty ?x ?y) (not (at ?t ?x ?y)))
   )
  (:action move-o-s
   :parameters (?t ?x ?y ?ys)
   :precondition (and (type_o ?t) (at ?t ?x ?y) (adjns ?y ?ys) (empty ?x ?ys))
   :effect (and (at ?t ?x ?ys) (not (empty ?x ?ys)) (empty ?x ?y) (not (at ?t ?x ?y)))
   )
)
